lamParser
■ lamParser 추가 구현 부분 설명
1. 디렉터리 와쳐 멀티 파일 부분
 - 디렉터리 와치로 수집시, 파일별로 순차적으로 테이블에 적재되는 것이 전제된다.
 - 파일의 첫행은 매 파일을 구분하기에 적절한 구분단위이다.
 - 파일의 첫행임을 구분해주는 문자열로 매 행을 검사한다.
 - 파일 첫행임이 확인되었을때, 파일단위로 필요한 필드변수를 초기화해준다.
 - 이에 따라 파일별로 파싱이 진행되게 할 수 있다.

2. stepId 추출 부분 로직
 - currentStepNumber 배열에 해당 구간 정보를 담는다.(담는 방법에 대해서는 유선상으로 통화했음), (이때는 이미 모든 행이 지나가고 해당 파일의 끝이다.)
 - 따라서 해당 배열정보로 파싱된 결과를 필드에 반영해야 할 경우, 그루비 파서를 한번 더 적용해야한다.
 - 상기의 파일의 끝에서 작성 완료된 currentStepNumber배열을 Array.toString(currentStepNumber)로 로그프레소 해당 파일 마지막행에 임의의 필드에 put 해준다.
 - 그루비 파서를 신규 작성하여, 상기의 행입력의 역순으로 입력을 받도록 스트림쿼리에 sort를 적용해둔다.
 - 역순으로 입력되어 currentStepNumber배열 정보가 있는 행이 해당 파일의 첫행이다.
 - 적절히 split하여 다시 배열로 원복한다.
 - 다음행부터는 msec필드를 읽어들여 해당값에 대해 currentStepNumber 배열을 통한 비교작업을 한다.
 - 다행히 currentStepNumber배열에 유의미한 데이터의 끝 인덱스는 26으로 확인되므로
 - for(int i=0; i<26; i++){
	if(msec >= currentStepNumber[i] && msec >= currentStepNumber[i+1] ){
		row.put("STEPID", i);
	} 
   }

